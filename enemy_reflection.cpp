//=============================================================================
//
// プレイヤー設定
// Author:Yuda Kaito
//
//=============================================================================
//-----------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------
#include <assert.h>
#include "enemy_reflection.h"
#include "line.h"
#include "utility.h"

//-----------------------------------------------------------------------------
// 定数
//-----------------------------------------------------------------------------
const D3DXVECTOR3 CEnemyReflection::SCALE(1.5f, 1.5f, 1.5f);
const D3DXVECTOR3 CEnemyReflection::MOVE_POWER(0.0f, -7.5f, 0.0f);
const int CEnemyReflection::REFLECT_COUNT = 5;

//-----------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------
CEnemyReflection::CEnemyReflection()
{
	m_reflectCnt = 0;
	SetType(CObject::EType::PLAYER);
}

//-----------------------------------------------------------------------------
// デストラクタ
//-----------------------------------------------------------------------------
CEnemyReflection::~CEnemyReflection()
{
}

//-----------------------------------------------------------------------------
// 初期化
//-----------------------------------------------------------------------------
HRESULT CEnemyReflection::Init()
{
	// 現在のモーション番号の保管
	CEnemy::Init();
	LoadModel("BOX");
	SetScale(SCALE);
	SetMove(MOVE_POWER);
	return S_OK;
}

//-----------------------------------------------------------------------------
// 終了
//-----------------------------------------------------------------------------
void CEnemyReflection::Uninit()
{
	CEnemy::Uninit();
}

//-----------------------------------------------------------------------------
// 更新
//-----------------------------------------------------------------------------
void CEnemyReflection::NormalUpdate()
{
	if (OnHitPlain())
	{
		MulMove(-1.0f);
		m_reflectCnt++;
	}

	if (m_reflectCnt >= REFLECT_COUNT)
	{
		SetUpdateStatus(EUpdateStatus::END);
	}
}

//-----------------------------------------------------------------------------
// 終了更新
//-----------------------------------------------------------------------------
void CEnemyReflection::EndUpdate()
{
	for (int i = 0; i < 10; i++)
	{
		D3DXVECTOR3 pos = m_pos;
		pos.x += FloatRandam(-20.0f, 20.0f);
		pos.y += FloatRandam(-20.0f, 20.0f);
		pos.z += FloatRandam(-20.0f, 20.0f);
	}

	CEnemy::EndUpdate();
}

//-----------------------------------------------------------------------------
// 描画
//-----------------------------------------------------------------------------
void CEnemyReflection::Draw()
{
	CEnemy::Draw();
}

//-----------------------------------------------------------------------------
// 移動量の設定
//-----------------------------------------------------------------------------
void CEnemyReflection::SetMove(const D3DXVECTOR3 & inMove)
{
	D3DXMATRIX mtxRot;
	D3DXMatrixRotationYawPitchRoll(&mtxRot, m_rot.y, m_rot.x, m_rot.z);		// 行列回転関数

	D3DXVECTOR3 move = inMove;
	D3DXVec3TransformCoord(&move, &move, &mtxRot);

	CObjectX::SetMove(move);
}
